// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Mock SpeechRecognizer with abort after audiostart 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with abort after recognizing 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with abort after soundstart 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with happy path with 2 interims 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "webspeech:result { isFinal: false, [[\\"hello\\"]]",
  "cognitiveservices:recognizing",
  "webspeech:result { isFinal: false, [[\\"hello\\"]]",
  "cognitiveservices:recognized",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "cognitiveservices:success",
  "webspeech:result { isFinal: true, [[\\"Hello, John.\\"]]",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with happy path without interims 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "cognitiveservices:recognized",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "cognitiveservices:success",
  "webspeech:result { isFinal: true, [[\\"Hello, John.\\"]]",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with microphone blocked 1`] = `
Array [
  "cognitiveservices:canceled",
  "webspeech:error { error: 'not-allowed' }",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with muted microphone 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "cognitiveservices:audioSourceOff",
  "webspeech:soundend",
  "webspeech:audioend",
  "cognitiveservices:success",
  "webspeech:error { error: 'no-speech' }",
  "webspeech:end",
]
`;

exports[`Mock SpeechRecognizer with network error 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:canceled",
  "webspeech:audioend",
  "webspeech:error { error: 'network' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognizer with text normalization of ITN should result in ITN 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "cognitiveservices:success",
  "webspeech:result { isFinal: true, [[\\"no (ITN)\\"]]",
  "webspeech:end",
]
`;

exports[`SpeechRecognizer with text normalization of lexical should result in lexical 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "cognitiveservices:success",
  "webspeech:result { isFinal: true, [[\\"no (Lexical)\\"]]",
  "webspeech:end",
]
`;

exports[`SpeechRecognizer with text normalization of masked ITN should result in masked ITN 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudioChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "cognitiveservices:success",
  "webspeech:result { isFinal: true, [[\\"no (MaskedITN)\\"]]",
  "webspeech:end",
]
`;
