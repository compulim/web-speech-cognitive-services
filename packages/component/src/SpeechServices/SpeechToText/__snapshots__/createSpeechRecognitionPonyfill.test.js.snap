// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SpeechRecognition in continuous mode abort after recognized 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "webspeech:result ['Hello, World!' (isFinal)]",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in continuous mode abort after recognizing 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "webspeech:result ['hello world']",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in continuous mode stop after recognized 1 speech and 1 ongoing 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "webspeech:result ['hello']",
  "cognitiveservices:recognized",
  "webspeech:result ['Hello.' (isFinal)]",
  "cognitiveservices:stop",
  "cognitiveservices:recognized",
  "webspeech:result ['Hello.' (isFinal), 'World.' (isFinal)]",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in continuous mode stop after recognizing 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "webspeech:result ['hello']",
  "cognitiveservices:stop",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in continuous mode with unrecognizable sound should throw error 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:stop",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'no-speech' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode abort after audiostart 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode abort after recognizing 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode abort after soundstart 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:abort",
  "cognitiveservices:audioSourceOff",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode abort after start 1`] = `
Array [
  "cognitiveservices:abort",
  "webspeech:start",
  "webspeech:error { error: 'aborted' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode stop after audiostart 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:stop",
  "cognitiveservices:audioSourceOff",
  "webspeech:audioend",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode stop after recognizing 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "webspeech:result ['hello']",
  "cognitiveservices:stop",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode stop after soundstart 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:stop",
  "cognitiveservices:audioSourceOff",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode stop after start 1`] = `
Array [
  "cognitiveservices:stop",
  "webspeech:start",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode with interims 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "webspeech:result ['hello']",
  "cognitiveservices:recognizing",
  "webspeech:result ['hello world']",
  "cognitiveservices:recognized",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:result ['Hello, World!' (isFinal)]",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode with muted microphone 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:recognized",
  "cognitiveservices:audioSourceOff",
  "webspeech:audioend",
  "webspeech:error { error: 'no-speech' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode with unrecognizable sound should throw error 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:stop",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:error { error: 'no-speech' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition in interactive mode without interims 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognizing",
  "webspeech:speechstart",
  "cognitiveservices:recognized",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:result ['Hello, World!' (isFinal)]",
  "webspeech:end",
]
`;

exports[`SpeechRecognition with microphone blocked 1`] = `
Array [
  "cognitiveservices:canceled",
  "webspeech:error { error: 'not-allowed' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition with network error 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:canceled",
  "webspeech:audioend",
  "webspeech:error { error: 'network' }",
  "webspeech:end",
]
`;

exports[`SpeechRecognition with text normalization of ITN should result in ITN 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:result ['no (ITN)' (isFinal)]",
  "webspeech:end",
]
`;

exports[`SpeechRecognition with text normalization of lexical should result in lexical 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:result ['no (Lexical)' (isFinal)]",
  "webspeech:end",
]
`;

exports[`SpeechRecognition with text normalization of masked ITN should result in masked ITN 1`] = `
Array [
  "cognitiveservices:audioSourceReady",
  "webspeech:start",
  "webspeech:audiostart",
  "cognitiveservices:firstAudibleChunk",
  "webspeech:soundstart",
  "cognitiveservices:recognized",
  "webspeech:speechstart",
  "cognitiveservices:audioSourceOff",
  "webspeech:speechend",
  "webspeech:soundend",
  "webspeech:audioend",
  "webspeech:result ['no (MaskedITN)' (isFinal)]",
  "webspeech:end",
]
`;
